/********************************************/
/*                                          */
/*        üì± –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: BookVerse      */
/*        üìö –û–ø–∏—Å–∞–Ω–∏–µ: –≠—Ç–æ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–Ω–∏–≥. –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –ø—Ä—è–º–æ —Å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –≥–¥–µ –±—ã –≤—ã –Ω–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å. –° –ª–µ–≥–∫–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –∏ —á–∏—Ç–∞–π—Ç–µ —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏ –∏–∑ –ø–∞–º—è—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.    */
/*        üë§ –ê–≤—Ç–æ—Ä: efedotov                       */
/*        üìÖ –î–∞—Ç–∞: 2023-07-30                 */
/*        üöÄ –í–µ—Ä—Å–∏—è: 0.0                         */
/*                                          */
/*        ¬© –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.                */
/*                                          */
/// *****************************************
import 'dart:io';
import 'package:xml/xml.dart';

// Future<String> readFb2File(File file) async {
//   try {
//     // Read the fb2 file
//     String content = await file.readAsString();

//     // Parse the fb2 content
//     XmlDocument xmlDocument = XmlDocument.parse(content);
//     List<XmlNode> bodyNodes = xmlDocument.findAllElements('body').toList();

//     List<String> texts = [];
//     for (var bodyNode in bodyNodes) {
//       String text = bodyNode.text.trim(); // Trim the text to remove leading/trailing whitespaces
//       if (text.isNotEmpty) {
//         texts.add(text);
//       }
//     }

//     return texts.join('\n\n'); // Return the whole text as a single string with non-empty lines
//   } catch (e) {
//     print("Error reading or parsing the fb2 file: $e");
//     return ''; // Return an empty string in case of an error
//   }
// }

Future<String> readFb2File(File file) async {
  try {
    // Read the fb2 file
    String content = await file.readAsString();

    // Parse the fb2 content
    XmlDocument xmlDocument = XmlDocument.parse(content);
    List<XmlNode> descriptionNodes = xmlDocument.findAllElements('description').toList();

    String author = '';
    String title = '';
    for (var descriptionNode in descriptionNodes) {
      var authorNode = descriptionNode.findElements('author').firstOrNull;
      if (authorNode != null) {
        author = authorNode.text.trim();
      }
      var titleNode = descriptionNode.findElements('title-info').firstOrNull?.findElements('book-title').firstOrNull;
      if (titleNode != null) {
        title = titleNode.text.trim();
      }
      if (author.isNotEmpty && title.isNotEmpty) {
        break;
      }
    }

    List<XmlNode> bodyNodes = xmlDocument.findAllElements('body').toList();

    List<String> texts = [];
    for (var bodyNode in bodyNodes) {
      String text = bodyNode.text.trim(); // Trim the text to remove leading/trailing whitespaces
      if (text.isNotEmpty) {
        texts.add(text);
      }
    }

    String mainText = texts.join('\n\n');
    mainText = mainText.replaceAll(RegExp(r'\n{3,}'), '\n\n'); // Replace consecutive empty lines with a single empty line

    return '$author\n$title\n\n$mainText'; // Return author and title in one line, followed by the whole text
  } catch (e) {
    print("Error reading or parsing the fb2 file: $e");
    return ''; // Return an empty string in case of an error
  }
}
