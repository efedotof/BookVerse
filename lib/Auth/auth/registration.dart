/********************************************/
/*                                          */
/*        üì± –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: BookVerse      */
/*        üìö –û–ø–∏—Å–∞–Ω–∏–µ: –≠—Ç–æ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–Ω–∏–≥. –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –ø—Ä—è–º–æ —Å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –≥–¥–µ –±—ã –≤—ã –Ω–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å. –° –ª–µ–≥–∫–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –∏ —á–∏—Ç–∞–π—Ç–µ —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏ –∏–∑ –ø–∞–º—è—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.    */
/*        üë§ –ê–≤—Ç–æ—Ä: efedotov                       */
/*        üìÖ –î–∞—Ç–∞: 2023-07-30                 */
/*        üöÄ –í–µ—Ä—Å–∏—è: 0.0                         */
/*                                          */
/*        ¬© –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.                */
/*                                          */
/// *****************************************

import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';
import 'package:magazine/Auth/auth/login.dart';
import 'package:magazine/tools/message.dart';
import 'package:magazine/widgets/until/AuthUntil/Auth.dart';
import 'package:magazine/widgets/until/LottieWidget.dart';
import 'package:magazine/widgets/until/TextField.dart';
import 'package:shared_preferences/shared_preferences.dart';


class Registration extends StatefulWidget {
  const Registration({super.key});

  @override
  State<Registration> createState() => _RegistrationState();
}

class _RegistrationState extends State<Registration> {
  final FirebaseAuth auth = FirebaseAuth.instance;
  final usernameController = TextEditingController();
  final nickname = TextEditingController();
  final email = TextEditingController();
  final passwordController = TextEditingController();
  final repeatpasswordController = TextEditingController();

  void usingin() {
    if (usernameController.text.isNotEmpty &&
        nickname.text.isNotEmpty &&
        passwordController.text.isNotEmpty &&
        repeatpasswordController.text.isNotEmpty &&
        email.text.isNotEmpty) {
      if (passwordController.text.length < 10 ||
          containsForbiddenCharacters(passwordController.text)) {
        Message.show(context,
            message:
                "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã",
            duration: const Duration(seconds: 3));
      } else if (passwordController.text != repeatpasswordController.text) {
        Message.show(context,
            message: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç",
            duration: const Duration(seconds: 3));
      } else if (!isValidEmail(email.text)) {
        Message.show(context,
            message: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã",
            duration: const Duration(seconds: 3));
      } else {
        Auth().registration(context, email.text, passwordController.text,
        

            usernameController.text, nickname.text);
      }
    } else {
      Message.show(context,
          message: "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã",
          duration: const Duration(seconds: 3));
    }
  }

  bool containsForbiddenCharacters(String text) {
    final forbiddenCharacters = RegExp(r'[!@#\$%^&*()\[\]{}<>?":;]');
    return forbiddenCharacters.hasMatch(text);
  }

  bool isValidEmail(String email) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
    final emailRegex =
        RegExp(r'^[\w-]+(\.[\w-]+)*@([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,7}$');
    return emailRegex.hasMatch(email);
  }

  Future setPrefs() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    prefs.setString('email', email.text);
    prefs.setString('passwords', passwordController.text);
  }


  Future clear_prefs()async{
    SharedPreferences prefs = await SharedPreferences.getInstance();
    prefs.clear();
    print('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: SingleChildScrollView(
          child: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const SizedBox(height: 50),
                const Lotties(
                  image: 'assets/registration.json',
                  width: 150,
                  heigth: 150,
                ),
                const SizedBox(height: 25),
                Text(
                  '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å',
                  style: TextStyle(
                    color: Colors.grey[700],
                    fontSize: 16,
                  ),
                ),
                const SizedBox(height: 15),
                MyTextField(
                  controller: usernameController,
                  hintText: '–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                  obscureText: false,
                ),
                MyTextField(
                  controller: nickname,
                  hintText: '–ù–∏–∫–Ω–µ–π–º',
                  obscureText: false,
                ),
                MyTextField(
                  controller: email,
                  hintText: '–ü–æ—á—Ç–∞',
                  obscureText: false,
                ),
                MyTextField(
                  controller: passwordController,
                  hintText: '–ü–∞—Ä–æ–ª—å',
                  obscureText: true,
                ),
                MyTextField(
                  controller: repeatpasswordController,
                  hintText: '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
                  obscureText: true,
                ),
                const SizedBox(height: 10),
                const SizedBox(height: 20),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 25.0),
                  child: Row(
                    children: [
                      Expanded(
                        child: Divider(
                          thickness: 0.5,
                          color: Colors.grey[400],
                        ),
                      ),
                      Container(
                        width: 300,
                        height: 60,
                        decoration: BoxDecoration(
                          color: Colors.blue.shade500,
                          borderRadius: BorderRadius.circular(30),
                        ),
                        child: OutlinedButton(
                          onPressed: () {
                            clear_prefs();
                            setPrefs();

                            usingin();
                          },
                          style: OutlinedButton.styleFrom(
                            side: BorderSide.none,
                            shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(30)),
                          ),
                          child: const Text(
                            '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
                            style: TextStyle(
                              color: Colors.white, // –ë–µ–ª—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
                            ),
                          ),
                        ),
                      )
                    ],
                  ),
                ),

                const SizedBox(height: 20),
                // not a member? register now
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      '–ï—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç ?',
                      style: TextStyle(color: Colors.grey[700]),
                    ),
                    TextButton(
                        onPressed: () {
                          Navigator.of(context).push(
                            MaterialPageRoute(
                                builder: (context) => const LoginScreen()),
                          );
                        },
                        child: const Text(
                          '–í–æ–π—Ç–∏',
                          style: TextStyle(
                            color: Colors.blue,
                            fontWeight: FontWeight.bold,
                          ),
                        )),
                  ],
                )
              ],
            ),
          ),
        ),
      ),
    );
  }
}
